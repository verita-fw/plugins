{% if helpers.exists('Muro.bind.general.enabled') and Muro.bind.general.enabled == '1' %}

{% if helpers.exists('Muro.bind.acl.acls.acl') %}
{%   for acl_list in helpers.toList('Muro.bind.acl.acls.acl') %}
{%     if acl_list.enabled == '1' %}
acl "{{ acl_list.name }}" { {{ acl_list.networks.replace(',', '; ') }}; };
{%     endif %}
{%   endfor %}
{% endif %}

options {

        directory       "/usr/local/etc/namedb/working";
        pid-file        "/var/run/named/pid";
        dump-file       "/var/dump/named_dump.db";
        statistics-file "/var/stats/named.stats";

{% for listenv4 in Muro.bind.general.listenv4.split(',') %}
        listen-on port {{ Muro.bind.general.port }} { {% if listenv4 == '0.0.0.0' %}any{% else %}{{ listenv4 }}{% endif %}; };
{% endfor %}
{% for listenv6 in Muro.bind.general.listenv6.split(',') %}
        listen-on-v6 port {{ Muro.bind.general.port }} { {% if listenv6 == '::' %}any{% else %}{{ listenv6 }}{% endif %}; };
{% endfor %}

{% if helpers.exists('Muro.bind.general.querysource') and Muro.bind.general.querysource != '' %}
        query-source {{ Muro.bind.general.querysource }};
{% endif -%}

{% if helpers.exists('Muro.bind.general.querysourcev6') and Muro.bind.general.querysourcev6 != '' %}
        query-source-v6 {{ Muro.bind.general.querysourcev6 }};
{% endif -%}

{% if helpers.exists('Muro.bind.general.transfersource') and Muro.bind.general.transfersource != '' %}
        transfer-source {{ Muro.bind.general.transfersource }};
{% endif -%}

{% if helpers.exists('Muro.bind.general.transfersourcev6') and Muro.bind.general.transfersourcev6 != '' %}
        transfer-source-v6 {{ Muro.bind.general.transfersourcev6 }};
{% endif -%}

{% if helpers.exists('Muro.bind.general.forwarders') and Muro.bind.general.forwarders != '' %}
        forwarders    { {{ Muro.bind.general.forwarders.replace(',', '; ') }}; };
{% endif -%}

{% if helpers.exists('Muro.bind.dnsbl.enabled') and Muro.bind.dnsbl.enabled == '1' %}
        response-policy { {% if helpers.exists('Muro.bind.dnsbl.type') and Muro.bind.dnsbl.type != '' %}zone "whitelist.localdomain"; zone "blacklist.localdomain";{% endif %}{% if helpers.exists('Muro.bind.dnsbl.forcesafegoogle') and Muro.bind.dnsbl.forcesafegoogle == '1' %}zone "rpzgoogle";{% endif %}{% if helpers.exists('Muro.bind.dnsbl.forcesafeduckduckgo') and Muro.bind.dnsbl.forcesafeduckduckgo == '1' %}zone "rpzduckduckgo";{% endif %}{% if helpers.exists('Muro.bind.dnsbl.forcesafeyoutube') and Muro.bind.dnsbl.forcesafeyoutube == '1' %}zone "rpzyoutube";{% endif %}{% if helpers.exists('Muro.bind.dnsbl.forcestrictbing') and Muro.bind.dnsbl.forcestrictbing == '1' %}zone "rpzbing";{% endif %} };
{% endif %}

{% if helpers.exists('Muro.bind.general.recursion') and Muro.bind.general.recursion != '' %}
        recursion          yes;
        allow-recursion {
{%              for acl in helpers.toList('Muro.bind.general.recursion') %}
{%              set recursion_acl = helpers.getUUID(acl) %}
                {{ recursion_acl.name }};
{%              endfor %}
        };
{% endif %}

{% if helpers.exists('Muro.bind.general.allowtransfer') and Muro.bind.general.allowtransfer != '' %}
        allow-transfer {
{%              for acl in helpers.toList('Muro.bind.general.allowtransfer') %}
{%              set transfer_acl = helpers.getUUID(acl) %}
                {{ transfer_acl.name }};
{%              endfor %}
        };
{% endif %}

{% if helpers.exists('Muro.bind.general.allowquery') and Muro.bind.general.allowquery != '' %}
        allow-query {
{%              for acl in helpers.toList('Muro.bind.general.allowquery') %}
{%              set query_acl = helpers.getUUID(acl) %}
                {{ query_acl.name }};
{%              endfor %}
        };
{% endif %}

{% if helpers.exists('Muro.bind.general.maxcachesize') and Muro.bind.general.maxcachesize != '' %}
        max-cache-size    {{ Muro.bind.general.maxcachesize }}%;
{% endif %}
{% if helpers.exists('Muro.bind.general.dnssecvalidation') and Muro.bind.general.dnssecvalidation != '' %}
        dnssec-validation    {{ Muro.bind.general.dnssecvalidation }};
{% endif %}
{% if helpers.exists('Muro.bind.general.hidehostname') and Muro.bind.general.hidehostname == '1' %}
        hostname none;
{% endif %}
{% if helpers.exists('Muro.bind.general.hideversion') and Muro.bind.general.hideversion == '1' %}
        version none;
{% endif %}
{% if helpers.exists('Muro.bind.general.disableprefetch') and Muro.bind.general.disableprefetch == '1' %}
        prefetch 0;
{% endif %}
{% if helpers.exists('Muro.bind.general.enableratelimiting') and Muro.bind.general.enableratelimiting == '1' %}
{%   if helpers.exists('Muro.bind.general.ratelimitcount') and Muro.bind.general.ratelimitcount != '' %}
	rate-limit {
                responses-per-second {{ Muro.bind.general.ratelimitcount }};
{%     if helpers.exists('Muro.bind.general.ratelimitexcept') and Muro.bind.general.ratelimitexcept != '' %}
                exempt-clients { {{ Muro.bind.general.ratelimitexcept.replace(',', '; ') }}; };
{%     endif %}
        };
{%   endif %}
{% endif %}
};

{% if helpers.exists('Muro.bind.general.rndcalgo') and helpers.exists('Muro.bind.general.rndcsecret') %}
key "rndc-key" {
        algorithm "{{ Muro.bind.general.rndcalgo }}";
        secret "{{ Muro.bind.general.rndcsecret }}";
};
controls {
        inet 127.0.0.1 port 9530
                allow { 127.0.0.1; } keys { "rndc-key"; };
};
{% endif %}

zone "." { type hint; file "/usr/local/etc/namedb/named.root"; };

zone "localhost"        { type primary; file "/usr/local/etc/namedb/primary/localhost-forward.db"; };
zone "127.in-addr.arpa" { type primary; file "/usr/local/etc/namedb/primary/localhost-reverse.db"; };
zone "0.ip6.arpa"       { type primary; file "/usr/local/etc/namedb/primary/localhost-reverse.db"; };

{% if helpers.exists('Muro.bind.dnsbl.enabled') and Muro.bind.dnsbl.enabled == '1' %}
{%   if helpers.exists('Muro.bind.dnsbl.type') and Muro.bind.dnsbl.type != '' %}
zone "whitelist.localdomain" { type primary; file "/usr/local/etc/namedb/primary/whitelist.db"; notify no; check-names ignore; };
zone "blacklist.localdomain" { type primary; file "/usr/local/etc/namedb/primary/blacklist.db"; notify no; check-names ignore; };
{%   endif %}
{% endif %}
{% if helpers.exists('Muro.bind.dnsbl.enabled') and Muro.bind.dnsbl.enabled == '1' %}
{%   if helpers.exists('Muro.bind.dnsbl.forcesafegoogle') and Muro.bind.dnsbl.forcesafegoogle == '1' %}
zone "rpzgoogle" { type primary; file "/usr/local/etc/namedb/primary/google.db"; notify no; check-names ignore; };
{%   endif %}
{% endif %}
{% if helpers.exists('Muro.bind.dnsbl.enabled') and Muro.bind.dnsbl.enabled == '1' %}
{%   if helpers.exists('Muro.bind.dnsbl.forcesafeduckduckgo') and Muro.bind.dnsbl.forcesafeduckduckgo == '1' %}
zone "rpzduckduckgo" { type primary; file "/usr/local/etc/namedb/primary/duckduckgo.db"; notify no; check-names ignore; };
{%   endif %}
{% endif %}
{% if helpers.exists('Muro.bind.dnsbl.enabled') and Muro.bind.dnsbl.enabled == '1' %}
{%   if helpers.exists('Muro.bind.dnsbl.forcesafeyoutube') and Muro.bind.dnsbl.forcesafeyoutube == '1' %}
zone "rpzyoutube" { type primary; file "/usr/local/etc/namedb/primary/youtube.db"; notify no; check-names ignore; };
{%   endif %}
{% endif %}
{% if helpers.exists('Muro.bind.dnsbl.enabled') and Muro.bind.dnsbl.enabled == '1' %}
{%   if helpers.exists('Muro.bind.dnsbl.forcestrictbing') and Muro.bind.dnsbl.forcestrictbing == '1' %}
zone "rpzbing" { type primary; file "/usr/local/etc/namedb/primary/bing.db"; notify no; check-names ignore; };
{%   endif %}
{% endif %}

{% if helpers.exists('Muro.bind.domain.domains.domain') %}
{%   set usedkeys = [] %}
{%   for domain in helpers.toList('Muro.bind.domain.domains.domain') %}
{%     if domain.enabled == '1' %}
zone "{{ domain.domainname }}" {
        type {{ domain.type }};
{%       if domain.type == 'secondary' %}
{%         if domain.transferkey is defined %}
        primaries { {{ domain.primaryip.replace(',', ' key "' ~ domain.transferkeyname ~ '"; ') }} key "{{ domain.transferkeyname }}"; };
{%         else %}
        primaries { {{ domain.primaryip.replace(',', '; ') }}; };
{%         endif %}
{%         if domain.allownotifysecondary is defined %}
        allow-notify { {{ domain.allownotifysecondary.replace(',', '; ') }}; };
{%         endif %}
        file "/usr/local/etc/namedb/secondary/{{ domain.domainname }}.db";
{%       else %}
        file "/usr/local/etc/namedb/primary/{{ domain.domainname }}.db";
{%       endif %}
{%      if domain.allowtransfer is defined %}
        allow-transfer {
{%              for acl in domain.allowtransfer.split(',') %}
{%              set transfer_acl = helpers.getUUID(acl) %}
                {{ transfer_acl.name }};
{%              endfor %}
        };
{%      endif %}
{%      if domain.allowquery is defined %}
        allow-query {
{%              for acl in domain.allowquery.split(',') %}
{%              set query_acl = helpers.getUUID(acl) %}
                {{ query_acl.name }};
{%              endfor %}
        };
{%      endif %}
};
{%       if domain.type == 'secondary' and domain.transferkey is defined and not(domain.transferkeyname in usedkeys) %}
{%         do usedkeys.append(domain.transferkeyname) %}
key "{{ domain.transferkeyname }}" {
        algorithm "{{ domain.transferkeyalgo }}";
        secret "{{ domain.transferkey }}";
};
{%       endif %}
{%     endif %}
{%   endfor %}
{% endif %}


logging {
        channel default_log {
                file "/var/log/named/named.log" versions 3 size {{ Muro.bind.general.logsize }}m;
                print-time yes;
                print-severity yes;
                print-category yes;
        };

        channel query_log {
                file "/var/log/named/query.log" versions 3 size {{ Muro.bind.general.logsize }}m;
                print-time yes;
        };

        channel rpz_log {
                file "/var/log/named/rpz.log" versions 3 size {{ Muro.bind.general.logsize }}m;
                print-time yes;
        };

        category default { default_log; };
        category general { default_log; };
        category queries { query_log; };
        category rpz { rpz_log; };
        category lame-servers { null; };
};
{% endif %}

{% if helpers.exists('Muro.bind.general.filteraaaav4') and Muro.bind.general.filteraaaav4 == '1' or helpers.exists('Muro.bind.general.filteraaaav6') and Muro.bind.general.filteraaaav6 == '1' %}
plugin query "/usr/local/lib/bind/filter-aaaa.so" {
{% if helpers.exists('Muro.bind.general.filteraaaav4') and Muro.bind.general.filteraaaav4 == '1' %}
                   filter-aaaa-on-v4 yes;
{% endif %}
{% if helpers.exists('Muro.bind.general.filteraaaav6') and Muro.bind.general.filteraaaav6 == '1' %}
                   filter-aaaa-on-v6 yes;
{% endif %}
{% if helpers.exists('Muro.bind.general.filteraaaaacl') and Muro.bind.general.filteraaaaacl != '' %}
        filter-aaaa    { {{ Muro.bind.general.filteraaaaacl.replace(',', '; ') }}; };
{% endif %}
           };
{% endif %}
